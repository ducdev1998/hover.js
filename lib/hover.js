// hover.js v0.0.1 https://github.com/lihanli/hover.js
// Generated by CoffeeScript 1.4.0
(function() {
  var attrEscape;

  attrEscape = function(attr) {
    return attr.replace(/"/g, '%22').replace(/'/g, '%27');
  };

  this.generateHoverImages = function() {
    $('.hover-image').remove();
    return $('img.hover-zoom').each(function(i) {
      var $this, hoverImageId, largeImgSrc;
      $this = $(this);
      largeImgSrc = $this.data('img-large');
      if (largeImgSrc == null) {
        throw 'missing data-img-large attribute for an image';
      }
      hoverImageId = "hover-image-" + i;
      $('body').append("<div id='" + hoverImageId + "' class='hover-image'>\n  <img src='" + (attrEscape(largeImgSrc)) + "' />\n</div>");
      return $this.data('hover-image-div', $("#" + hoverImageId));
    }).mouseenter(function() {
      var $hoverDiv, $hoverImg, $this, bottomPadding, hasScrollBar, mouseOffset, scrollBarOffset, windowHeight, windowWidth;
      $this = $(this);
      $this.off('mousemove');
      $('.hover-image').hide();
      $hoverDiv = $this.data('hover-image-div');
      $hoverImg = $hoverDiv.find('img');
      windowHeight = innerHeight;
      windowWidth = innerWidth;
      mouseOffset = 25;
      hasScrollBar = $(document).height() > $(window).height();
      scrollBarOffset = 15;
      bottomPadding = 6;
      $hoverDiv.fadeIn('250ms');
      return $this.mousemove(function(e) {
        var absOffsets, clientX, clientY, imageHeight, imgPadding, k, v, _results;
        imageHeight = $hoverDiv.outerHeight();
        clientX = e.clientX, clientY = e.clientY;
        imgPadding = {
          top: 20,
          side: 20
        };
        absOffsets = {
          right: false,
          left: false,
          top: clientY,
          bottom: false
        };
        if ((clientY + imageHeight + imgPadding.top - (bottomPadding * 2)) > windowHeight) {
          absOffsets.top = false;
          absOffsets.bottom = bottomPadding;
        }
        if (clientX > (windowWidth / 2)) {
          absOffsets.right = windowWidth - clientX + mouseOffset;
          if (hasScrollBar) {
            absOffsets.right -= scrollBarOffset;
          }
        } else {
          absOffsets.left = clientX + mouseOffset;
          if (hasScrollBar) {
            imgPadding.side += scrollBarOffset;
          }
        }
        $hoverImg.css({
          'max-width': (absOffsets.left ? windowWidth - mouseOffset - clientX : clientX - mouseOffset) - imgPadding.side,
          'max-height': windowHeight - imgPadding.top
        });
        _results = [];
        for (k in absOffsets) {
          v = absOffsets[k];
          _results.push($hoverDiv.css(k, v === false ? '' : v));
        }
        return _results;
      });
    }).mouseleave(function() {
      return $(this).data('hover-image-div').hide();
    });
  };

  $(function() {
    return generateHoverImages();
  });

}).call(this);
